/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Order = {
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderNumber?: string;
  customerName?: string;
  customerEmail?: string;
  customerPhone?: string;
  shippingAddress?: string;
  items?: Array<{
    product?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "product";
    };
    productName?: string;
    productImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    quantity?: number;
    price?: number;
    total?: number;
    _key: string;
  }>;
  totalAmount?: number;
  paymentStatus?: "pending" | "paid" | "failed" | "refunded";
  paymentMethod?: "cod" | "card" | "upi" | "netbanking" | "wallet";
  status?: "pending" | "processing" | "shipped" | "delivered" | "completed" | "cancelled" | "returned";
  coupon?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sale";
  };
  orderNotes?: string;
  createdAt?: string;
  updatedAt?: string;
};

export type Sale = {
  _id: string;
  _type: "sale";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  discountAmount?: number;
  couponCode?: string;
  validFrom?: string;
  validUntil?: string;
  isActive?: boolean;
  backgroundImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  price?: number;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  stock?: number;
  ratings?: Array<{
    username?: string;
    score?: number;
    comment?: string;
    createdAt?: string;
    _key: string;
  }>;
  location?: {
    latitude?: number;
    longitude?: number;
    address?: string;
    radius?: number;
  };
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Order | Sale | Product | Category | Slug | BlockContent | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/orders/getMyOrders.ts
// Variable: MY_ORDER_QUERY
// Query: *[_type == "order" && clerkUserId == $userId] | order(createdAt desc) {      _id,      orderNumber,      customerName,      customerEmail,      customerPhone,      shippingAddress,      items[] {        product->{          _id,          name,          image { asset->{url} },          price        },        productName,        productImage { asset->{url} },        quantity,        price,        total      },      totalAmount,      paymentStatus,      paymentMethod,      status,      coupon->{        _id,        title,        discountAmount,        couponCode      },      orderNotes,      createdAt,      updatedAt    }
export type MY_ORDER_QUERYResult = Array<{
  _id: string;
  orderNumber: string | null;
  customerName: string | null;
  customerEmail: string | null;
  customerPhone: string | null;
  shippingAddress: string | null;
  items: Array<{
    product: {
      _id: string;
      name: string | null;
      image: {
        asset: {
          url: string | null;
        } | null;
      } | null;
      price: number | null;
    } | null;
    productName: string | null;
    productImage: {
      asset: {
        url: string | null;
      } | null;
    } | null;
    quantity: number | null;
    price: number | null;
    total: number | null;
  }> | null;
  totalAmount: number | null;
  paymentStatus: "failed" | "paid" | "pending" | "refunded" | null;
  paymentMethod: "card" | "cod" | "netbanking" | "upi" | "wallet" | null;
  status: "cancelled" | "completed" | "delivered" | "pending" | "processing" | "returned" | "shipped" | null;
  coupon: {
    _id: string;
    title: string | null;
    discountAmount: number | null;
    couponCode: string | null;
  } | null;
  orderNotes: string | null;
  createdAt: string | null;
  updatedAt: string | null;
}>;

// Source: ./sanity/lib/products/getAllCategories.ts
// Variable: ALL_CATEGORIES_QUERY
// Query: *[_type == "category"] | order(title asc) {      _id,      title,      slug { current },      description    }
export type ALL_CATEGORIES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: {
    current: string | null;
  } | null;
  description: string | null;
}>;

// Source: ./sanity/lib/products/getAllProducts.ts
// Variable: ALL_PRODUCTS_QUERY
// Query: *[_type == "product"] | order(name asc) {      _id,      name,      slug { current },      image { asset->{ url } },      images[] { asset->{ url } },      description,      price,      stock,      "categories": categories[]-> { _id, title, slug },      location {        latitude,        longitude,        address,        radius      },      ratings[] {        username,        score,        comment,        createdAt      }    }
export type ALL_PRODUCTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  slug: {
    current: string | null;
  } | null;
  image: {
    asset: {
      url: string | null;
    } | null;
  } | null;
  images: Array<{
    asset: {
      url: string | null;
    } | null;
  }> | null;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  price: number | null;
  stock: number | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
  }> | null;
  location: {
    latitude: number | null;
    longitude: number | null;
    address: string | null;
    radius: number | null;
  } | null;
  ratings: Array<{
    username: string | null;
    score: number | null;
    comment: string | null;
    createdAt: string | null;
  }> | null;
}>;

// Source: ./sanity/lib/products/getProductBySlug.ts
// Variable: PRODUCT_BY_TD_QUERY
// Query: *[            _type == "product" && slug.current == $slug        ] | order(name asc) [0]
export type PRODUCT_BY_TD_QUERYResult = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  price?: number;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  stock?: number;
  ratings?: Array<{
    username?: string;
    score?: number;
    comment?: string;
    createdAt?: string;
    _key: string;
  }>;
  location?: {
    latitude?: number;
    longitude?: number;
    address?: string;
    radius?: number;
  };
} | null;

// Source: ./sanity/lib/products/getProductsByCategory.ts
// Variable: PRODUCTS_BY_CATEGORY_QUERY
// Query: *[      _type == "product"      && references(*[_type == "category" && slug.current == $categorySlug]._id)    ] | order(name asc) {      _id,      name,      slug { current },      image { asset->{ url } },      images[] { asset->{ url } },      description,      price,      stock,      "categories": categories[]-> { _id, title, slug },      location {        latitude,        longitude,        address,        radius      },      ratings[] {        username,        score,        comment,        createdAt      }    }
export type PRODUCTS_BY_CATEGORY_QUERYResult = Array<{
  _id: string;
  name: string | null;
  slug: {
    current: string | null;
  } | null;
  image: {
    asset: {
      url: string | null;
    } | null;
  } | null;
  images: Array<{
    asset: {
      url: string | null;
    } | null;
  }> | null;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  price: number | null;
  stock: number | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
  }> | null;
  location: {
    latitude: number | null;
    longitude: number | null;
    address: string | null;
    radius: number | null;
  } | null;
  ratings: Array<{
    username: string | null;
    score: number | null;
    comment: string | null;
    createdAt: string | null;
  }> | null;
}>;

// Source: ./sanity/lib/products/searchProductByName.ts
// Variable: PRODUCT_SEARCH_QUERY
// Query: *[            _type == "product"            && name match $searchParam        ]   | order(name asc)
export type PRODUCT_SEARCH_QUERYResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  price?: number;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  stock?: number;
  ratings?: Array<{
    username?: string;
    score?: number;
    comment?: string;
    createdAt?: string;
    _key: string;
  }>;
  location?: {
    latitude?: number;
    longitude?: number;
    address?: string;
    radius?: number;
  };
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n    *[_type == \"order\" && clerkUserId == $userId] | order(createdAt desc) {\n      _id,\n      orderNumber,\n      customerName,\n      customerEmail,\n      customerPhone,\n      shippingAddress,\n      items[] {\n        product->{\n          _id,\n          name,\n          image { asset->{url} },\n          price\n        },\n        productName,\n        productImage { asset->{url} },\n        quantity,\n        price,\n        total\n      },\n      totalAmount,\n      paymentStatus,\n      paymentMethod,\n      status,\n      coupon->{\n        _id,\n        title,\n        discountAmount,\n        couponCode\n      },\n      orderNotes,\n      createdAt,\n      updatedAt\n    }\n  ": MY_ORDER_QUERYResult;
    "\n    *[_type == \"category\"] | order(title asc) {\n      _id,\n      title,\n      slug { current },\n      description\n    }\n  ": ALL_CATEGORIES_QUERYResult;
    "\n    *[_type == \"product\"] | order(name asc) {\n      _id,\n      name,\n      slug { current },\n      image { asset->{ url } },\n      images[] { asset->{ url } },\n      description,\n      price,\n      stock,\n      \"categories\": categories[]-> { _id, title, slug },\n      location {\n        latitude,\n        longitude,\n        address,\n        radius\n      },\n      ratings[] {\n        username,\n        score,\n        comment,\n        createdAt\n      }\n    }\n  ": ALL_PRODUCTS_QUERYResult;
    "\n        *[\n            _type == \"product\" && slug.current == $slug\n        ] | order(name asc) [0]\n        ": PRODUCT_BY_TD_QUERYResult;
    "\n    *[\n      _type == \"product\"\n      && references(*[_type == \"category\" && slug.current == $categorySlug]._id)\n    ] | order(name asc) {\n      _id,\n      name,\n      slug { current },\n      image { asset->{ url } },\n      images[] { asset->{ url } },\n      description,\n      price,\n      stock,\n      \"categories\": categories[]-> { _id, title, slug },\n      location {\n        latitude,\n        longitude,\n        address,\n        radius\n      },\n      ratings[] {\n        username,\n        score,\n        comment,\n        createdAt\n      }\n    }\n  ": PRODUCTS_BY_CATEGORY_QUERYResult;
    "\n        *[\n            _type == \"product\"\n            && name match $searchParam\n        ]   | order(name asc)\n        ": PRODUCT_SEARCH_QUERYResult;
  }
}
